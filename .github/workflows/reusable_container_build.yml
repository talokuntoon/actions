name: Container Build (Reusable)

on:
  # Specify the inputs for this reusable workflow
  workflow_call:
    inputs:
      registry:
        description: 'Container registry to use (defaults to "ghcr.io")'
        required: false
        type: string
        default: ghcr.io
      image:
        description: 'Image name (defaults to "organization/repository")'
        required: false
        type: string
        default: ${{ github.repository }}
      dockerfile:
        description: 'Dockerfile to use (defaults to "Dockerfile")'
        required: false
        type: string
        default: Dockerfile
      context:
        description: 'Context for the Docker build (defaults to ".")'
        required: false
        type: string
        default: .
      ## FIXME: We not only need to get this injected to the build-args with every single build,
      ##        but we ALSO need to somehow feed this as an array, however inputs don't support arrays?!
      ## TODO: We can utilize toJSON() and fromJSON() to do this with strings, eg. "['foo', 'bar']"
      build-args:
        description: 'Comma separated list of build arguments (defaults to "BUILDKIT_INLINE_CACHE=1")'
        required: false
        type: string
        default: BUILDKIT_INLINE_CACHE=1
      platforms:
        description: 'Comma separated list of platforms to build for (defaults to "linux/amd64,linux/arm64")'
        required: false
        type: string
        default: linux/amd64,linux/arm64
      pull:
        description: 'Always attempt to pull a newer version of the base image (defaults to "false")'
        required: false
        type: boolean
        default: false
      push:
        description: 'Push the image to the registry (defaults to "false")'
        required: false
        type: boolean
        default: false
      skip:
        description: 'Skip the build (defaults to "false")'
        required: false
        type: boolean
        default: false
    outputs:
      tag:
        description: 'The generated tag for the built image'
        value: ${{ jobs.build-image.outputs.tag }}
      tags:
        description: 'All tags for the built image'
        value: ${{ jobs.build-image.outputs.tags }}

jobs:

  # Check if we should skip the build
  check-skip:
    name: Check Skip
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check-skip.outputs.skip }}
    steps:
      - name: Check if we should skip the build
        id: check-skip
        run: echo "skip=${{ inputs.skip }}" >> $GITHUB_OUTPUT

  # Build and publish the project/application container image(s)
  build-image:
    name: Build & Publish Image
    if: ${{ !inputs.skip }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
      packages: write
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
      tag: ${{ steps.generate_tag.outputs.tag }}
    steps:

      # Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Setup QEMU for multi-architecture builds
      # https://github.com/docker/setup-qemu-action
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      # Setup Docker Buildx for multi-architecture builds
      # https://github.com/docker/setup-buildx-action
      - name: Setup Docker Buildx
        id: docker_buildx
        uses: docker/setup-buildx-action@v2

      # Generate a tag for the image
      - name: Generate Tag
        id: generate_tag
        run: |

          echo "::notice::Generating tag for registry/image: ${{ inputs.registry }}/${{ inputs.image }}"
          # If not a pull request, use github.ref_name, otherwise use the pull request number
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "tag=pr-${{ github.event.number }}" >> $GITHUB_OUTPUT
            echo "::notice::Generated PR image tag: pr-${{ github.event.number }}"
          else
            echo "tag=${{ github.ref_name }}" >> $GITHUB_OUTPUT
            echo "::notice::Generated non-PR image tag: ${{ github.ref_name }}"
          fi

      # Login to the container registry
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ inputs.registry }}
          # NOTE: We use a personal access token instead of the default GITHUB_TOKEN,
          #       as the latter does not have the required permissions to pull/push
          #       anything we want to the container registry.
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GHCR_ACCESS_TOKEN }}

      ##
      ## TODO: No longer needed when using "BUILDKIT_INLINE_CACHE=1" build arguments!?
      ##       https://testdriven.io/blog/faster-ci-builds-with-docker-cache/
      ##
      # Pull the latest image (if any) to speed up the build process
      # - name: Pull Latest
      #   run: |
      #     docker pull ${{ inputs.registry }}/${{ inputs.image }}:${{ steps.generate_tag.outputs.tag }} || true
      #     docker pull ${{ inputs.registry }}/${{ inputs.image }}:latest || true

      # Generate the metadata for the image
      - name: Generate Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ inputs.registry }}/${{ inputs.image }}
          flavor: |
            latest=true
          tags: |
            type=raw,value=${{ steps.generate_tag.outputs.tag }}

      # Build the image and push it to the container registry
      - name: Build and Push Image to Container Registry
        uses: docker/build-push-action@v3
        with:
          file: ${{ inputs.dockerfile }}
          context: ${{ inputs.context }}
          build-args: ${{ inputs.build-args }}
          platforms: ${{ inputs.platforms }}
          pull: ${{ inputs.pull }} ## TODO: Do we really even need this? Especially with the buildkit/buildx stuff?!
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            GIT_AUTH_TOKEN=${{ secrets.GHCR_ACCESS_TOKEN }}
